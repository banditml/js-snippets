function BanditAPI(t,e={},i=!1,n){this.storage=window.localStorage,this.banditApikey=t;const s="https://www.16ounc.es/api/";this.banditDecisionEndpoint=s+"decision",this.banditLogRewardEndpoint=`${s}reward`,this.banditLogDecisionEndpoint=`${s}log_decision`,this.banditValidationEndpoint=`${s}validate`,this.sessionIdKey="BanditMLSessionId",this.lastActionTimeKey="BanditMLLastActionTime",this.sessionLengthHrs=n||2,this.rewardTypeClick="click",this.recClassByExperimentId=e,this.decisionsLoggedById={},this.debugMode=i,this.ipUrl="https://api.ipify.org?format=json"}BanditAPI.prototype.addDecisionHandler=function(t,e,i){const n=this,s=n.recClassByExperimentId[i],o=document.getElementsByClassName(s)[0];o&&document.addEventListener("scroll",function(){!n.decisionsLoggedById[e.id]&&o.getBoundingClientRect().bottom<=window.innerHeight&&(n.debugMode&&console.log("User has seen decision. Auto logging it."),n.logDecision(t,e,i),n.decisionsLoggedById[e.id]=!0)})},BanditAPI.prototype.sessionDecisionsKey=function(t){return`BanditMLSessionDecisions-${t}`},BanditAPI.prototype.isTimeExpired=function(t,e){return((new Date).getTime()-t)/36e5>e},BanditAPI.prototype.uuidv4=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,t=>(t^crypto.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16))},BanditAPI.prototype.getSessionDecisions=function(t){return this.getItemFromStorage(this.sessionDecisionsKey(t))||[]},BanditAPI.prototype.updateSessionDecisions=function(t,e){let i=this.getSessionDecisions(e);i.unshift(t),this.setItemInStorage(this.sessionDecisionsKey(e),i)},BanditAPI.prototype.updateSessionId=function(){let t=this.getItemFromStorage(this.sessionIdKey),e=this.getItemFromStorage(this.lastActionTimeKey);if(!t||!e||this.isTimeExpired(e,this.sessionLengthHrs)){let t=this.uuidv4();this.setItemInStorage(this.sessionIdKey,t),this.setItemInStorage(this.lastActionTimeKey,(new Date).getTime())}return t},BanditAPI.prototype.clearSession=function(){this.storage.removeItem(this.sessionIdKey),this.storage.removeItem(this.lastActionTimeKey),this.storage.removeItem(this.sessionDecisionsKey)},BanditAPI.prototype.getSessionId=function(){return this.getItemFromStorage(this.sessionIdKey)||this.updateSessionId()},BanditAPI.prototype.assert=function(t,e){if(!t){if(e=e||"Assertion failed.",e+=" Contact support@banditml.com for assistance.","undefined"!=typeof Error)throw new Error(e);throw e}},BanditAPI.prototype.isFunction=function(t){if(!t)return!1;const e={}.toString.call(t);return"[object Function]"===e||"[object AsyncFunction]"===e},BanditAPI.prototype.asyncGetRequest=async function(t,e={},i={}){e&&Object.keys(e).length&&(t+="?");for(const i in e){let n=e[i];if(null!=i&&null!=n){const e=typeof n;let s;t+=`${i}=${s="number"===e||"string"===e?n:encodeURIComponent(JSON.stringify(n))}&`}}const n=await fetch(t,{method:"GET",headers:i});return await n.json()},BanditAPI.prototype.asyncPostRequest=async function(t="",e={},i={}){e.hasOwnProperty("Content-Type")||(e["Content-Type"]="application/json");const n=await fetch(t,{method:"POST",headers:e,body:JSON.stringify(i)});return await n.json()},BanditAPI.prototype.getItemFromStorage=function(t){return JSON.parse(this.storage.getItem(t))},BanditAPI.prototype.contextName=function(t){return`banditMLContext-${t}`},BanditAPI.prototype.contextValidationKey=function(t){return`banditMLContextValidation-${t}`},BanditAPI.prototype.getContext=function(t){return this.getItemFromStorage(this.contextName(t))},BanditAPI.prototype.validateAndFilterFeaturesInContext=function(t,e){const i=this;let n={};for(const s in t){if("ipAddress"===s){n.ipAddress=t.ipAddress;continue}if(e.hasOwnProperty(s)){const o=t[s],r=e[s],a=r.possible_values,d=r.type;if(n[s]=o,"N"===d){const t=typeof o;i.assert("number"==typeof o,`Feature ${s} is expected to be numeric, but ${o} of type ${t} was passed.`)}else"C"===d?(i.assert(Array.isArray(a),`Feature ${s} is categorical, but its possible values is not an array. Update the model appropriately in Bandit ML.`),i.assert(a.includes(t[s]),`Value ${o} is not recognized among possible values for feature ${s}. Please update the possible values in Bandit ML.`)):"P"===d&&(i.assert(Array.isArray(a),`Feature ${s} is a product set, but its possible values is not an array. Update the model appropriately in Bandit ML.`),i.assert("string"==typeof o||Array.isArray(o),`Feature ${s} is a product set that expects an array or string, but ${o} is not an array or string.`),Array.isArray(o)?i.assert(o.every(t=>a.includes(t)),`${o} is not included in ${s}'s possible values ${a}.`):i.assert(a.includes(o),`${o} is not included in ${s}'s possible values ${a}.`))}else console.warn(`Feature ${s} is not recognized by the model. Please update your model to include this feature.`)}return n},BanditAPI.prototype.validateAndFilterContext=function(t,e){const i=this;i.assert("object"==typeof t&&null!==t,"Context must be a non-null object.");let n=i.getItemFromStorage(i.contextValidationKey(e));if(!n||i.isTimeExpired(n.generated_at_ms,4)){return i.asyncGetRequest(url=i.banditValidationEndpoint,params={experimentId:e},headers={Authorization:`ApiKey ${i.banditApikey}`}).then(s=>(n=s,i.setItemInStorage(i.contextValidationKey(e),n),i.validateAndFilterFeaturesInContext(t,n)))}return i.validateAndFilterFeaturesInContext(t,n)},BanditAPI.prototype.setItemInStorage=function(t,e){this.storage.setItem(t,JSON.stringify(e))},BanditAPI.prototype.setContext=async function(t,e){try{let i=this.validateAndFilterContext(t,e);return i.then&&(i=await i),this.setItemInStorage(this.contextName(e),i),i}catch(t){return console.error(t),i}},BanditAPI.prototype.clearContext=function(t){this.storage.removeItem(this.contextName(t))},BanditAPI.prototype.checkForShortTermReward=function(t,e,i){const n=this.getSessionDecisions(e);if(i===this.rewardTypeClick){const i=t.currentlyViewingProduct;if(i)for(let t of n)if(t.ids&&t.ids.includes(i)){this.logReward({[this.rewardTypeClick]:1},e,i,t.id);break}}},BanditAPI.prototype.updateContext=async function(t,e){this.assert("object"==typeof t&&null!==t,"newContext must be a non-null object."),this.assert(e&&"string"==typeof e,`experimentId must be non-null string. Got ${e} instead`);let i=this.getContext(e);return i=null==i?t:Object.assign({},i,t),(i=this.setContext(i,e)).then&&(i=await i),this.updateSessionId(),this.checkForShortTermReward(i,e,this.rewardTypeClick),this.debugMode&&(console.log("Updated context."),console.log(i)),i},BanditAPI.prototype.getControlRecs=async function(t){let e;if(this.assert(Array.isArray(t)||this.isFunction(t),"defaultProductRecs must be an array or function."),Array.isArray(t))e=t;else{let i=t();e=i&&i.then?await i:i}return e},BanditAPI.prototype.setRecs=async function(t=null,e=null,i=null){const n=this;if(n.validateDecisionIds(t),e){n.assert(n.isFunction(e),"filterRecs must be a function.");let i=e(t);i&&(t=i.then?await i:i)}if(i){n.assert(n.isFunction(i),"populateProductRecs must be a function.");let e=i(t);e&&(t=e.then?await e:e)}return t},BanditAPI.prototype.getDecision=async function(t,e=null,i=null,n=null,s=!0){const o=this;null!==t&&o.assert(null!==t&&"string"==typeof t,"experimentId needs to be non-null string."),o.asyncGetRequest(o.ipUrl,params={},headers={"Content-Type":"application/json",Accept:"application/json"}).then(async r=>{let a;try{(a=o.updateContext({ipAddress:r.ip},t)).then&&(a=await a)}catch(t){return console.error(t),o.setRecs(await o.getControlRecs(e),i,n)}return o.asyncGetRequest(url=o.banditDecisionEndpoint,params={context:a,experimentId:t},headers={Authorization:`ApiKey ${o.banditApikey}`}).then(async r=>{let d=r;o.debugMode&&(console.log("Got a decision from Bandit."),console.log(d));const c=d.decision.ids;let l;return l=e&&r.isControl?await o.getControlRecs(e):c,l=await o.setRecs(l,i,n),d.decision.ids=l,s&&(o.debugMode&&(console.log("Will log decision when user sees it"),console.log(d)),o.addDecisionHandler(a,d,t)),r}).catch(t=>(console.error(t),o.setRecs(o.getControlRecs(e),i,n)))})},BanditAPI.prototype.validateDecisionIds=function(t){const e=typeof t;this.assert(Array.isArray(t)||"number"===e||"string"===e,"decision IDs must be an array, number, or string")},BanditAPI.prototype.logDecision=function(t,e,i){const n=e.decision;this.validateDecisionIds(n.ids);const s={Authorization:`ApiKey ${this.banditApikey}`};this.updateSessionDecisions(n,i),this.asyncPostRequest(this.banditLogDecisionEndpoint,s,{id:e.id,context:t,decision:n,experimentId:i,mdpId:this.getSessionId(),variation_id:n.variation_id}).then(t=>(this.debugMode&&(console.log("Successfully logged decision"),console.log(t)),t)).catch(t=>{console.error(t)})},BanditAPI.prototype.logReward=function(t,e,i=null,n=null){const s={Authorization:`ApiKey ${this.banditApikey}`};this.assert(t&&"object"==typeof t,"Reward needs to be a non-empty object."),this.assert(null===i||"string"==typeof i,`Decision needs to be a single string ID or null. Got ${i} instead.`),this.asyncPostRequest(this.banditLogRewardEndpoint,s,{decisionId:n,decision:i,metrics:t,experimentId:e,mdpId:this.getSessionId()}).then(t=>(this.debugMode&&(console.log("Successfully logged reward."),console.log(t)),null===n&&this.clearSession(),t)).catch(t=>{console.error(t)})};